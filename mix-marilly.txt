

## mixtools

### check distributions

```{r,fig.width=7,fig.height=2.5}
a <- mco %>% #filter(igg=="igg3") %>% 
  ggplot(aes(x=Ab.units
             #,fill=pheno
             #,fill=igg
             )) +
  #scale_x_log10() +
  geom_density(alpha=.5,position = "identity") +
  geom_histogram(aes(x=Ab.units,..density..),
                 alpha=.5,position = "identity") +
  #theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title="AU linear distribution")

b <- mco %>% #filter(igg=="igg3") %>% 
  ggplot(aes(sample=Ab.units
             #,fill=pheno
             #,fill=igg
             )) +
  geom_qq(alpha=.2) +
  geom_qq_line(line.p = c(0.25, 0.75)) +
  labs(title="Gaussian quantile-quantile plot") +
  coord_cartesian(ylim = c(0,2000))

Rmisc::multiplot(a,b,cols = 2)
```


```{r,fig.width=6,fig.height=2.2}
mco %>% 
  ggplot(aes(x=Ab.units
             #,fill=pheno
             )) + theme_bw() +
  #scale_x_log10() +
  geom_density(alpha=.5,position = "identity",adjust= 1/2
               ) + 
  geom_histogram(aes(x=Ab.units,..density..),
                 alpha=.5,position = "identity") + 
  facet_wrap(~anti, scales = "free") +
  labs(title="AU linear distribution per IgG subtype")
```

### apply mixtools

```{r}
# source: http://tinyheero.github.io/2015/10/13/mixture-model.html
f <- mco %>% mutate(anti=as.factor(anti)) %>% 
  mutate(anti=forcats::fct_relevel(anti,"gest")) %>% .$anti

library("mixtools")

#' Plot a Mixture Component
#' 
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
  lam * dnorm(x, mu, sigma)
}

set.seed(1)
#length(levels(f))
#wait <- mco %>% filter(igg=="igg2") %>% 
#  .$Ab.units %>% log()

llmix <- data_frame(anti=as.character(),
                    kpr=as.numeric(),
                    lik=as.numeric())
for (j in 2:3) {
    
    mixmdl_p <- normalmixEM(mco %>% 
                              #filter(igg==levels(f)[i]) %>% 
                              .$Ab.units #%>% log10()
                            , 
                            k = j)
    llmix <- llmix %>% 
      union(data_frame(anti="all",#levels(f)[i],
                       kpr=j,
                       lik=mixmdl_p$loglik))
    
  }
llmix %>% arrange(anti,desc(lik)) %>% mutate(aic=2*kpr-2*lik)

#
llmix <- data_frame(anti=as.character(),
                    kpr=as.numeric(),
                    lik=as.numeric())
for (i in 1:length(levels(f))) {
  
  for (j in 2:3) {
    
    mixmdl_p <- normalmixEM(mco %>% 
                              filter(anti==levels(f)[i]) %>% 
                              .$Ab.units #%>% log10()
                            , 
                            k = j)
    llmix <- llmix %>% 
      union(data_frame(anti=levels(f)[i],
                       kpr=j,
                       lik=mixmdl_p$loglik))
    
  }
  
}
llmix %>% arrange(anti,desc(lik)) %>% mutate(aic=2*kpr-2*lik) #%>% 
  #group_by(igg) %>% filter(lik==max(lik))

#mixmdl <- normalmixEM(wait, k = 3)
#mixmdl$loglik
```

```{r,fig.height=3,fig.width=12}
### FOR ALL AB.UNITS (NO IGG SUBTYPES)
set.seed(1)

#for (i in 1:length(levels(f))) {
  
wait <- mco %>% #filter(igg==levels(f)[i]) %>% 
  .$Ab.units #%>% log10()
mixmdl <- normalmixEM(wait, k = 3)
###
r <- data.frame(x = mixmdl$x) %>%
  ggplot() +
  geom_histogram(aes(x, ..density..), 
                 #binwidth = 1, 
                 #colour = "black", 
                 #fill = "gray",
                 alpha=.5,position = "identity"
                 ) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[1], 
                            mixmdl$sigma[1], 
                            lam = mixmdl$lambda[1]),
                colour = "green", lwd = 1.5) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[2], 
                            mixmdl$sigma[2], 
                            lam = mixmdl$lambda[2]),
                colour = "blue", lwd = 1.5) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[3], 
                            mixmdl$sigma[3], 
                            lam = mixmdl$lambda[3]),
                colour = "red", lwd = 1.5) +
  ylab("Density") +
  xlab("Ab.units") +
  labs(title= paste0("Ab.units: ",
                     #ifelse(levels(f)[i]=="igg","IgG ",
                      #      ifelse(levels(f)[i]=="igg1","IgG1 ",
                        #           ifelse(levels(f)[i]=="igg2","IgG2 ",
                         #                 ifelse(levels(f)[i]=="igg3","IgG3 ","IgG4 ")
                          #                )
                          #         )
                          #  ),
                     "3-component distribution"
                     #,": LogLik=",
                     #mixmdl$loglik %>% format(digits=3)
                     )) 
  #+ scale_x_log10()

####
u <- 0.90 # 90% classification probability

post.df <- as.data.frame(cbind(x = mixmdl$x, mixmdl$posterior)) %>% 
  #mutate(comp.12=comp.1+comp.2,
  #       comp.23=comp.2+comp.3) %>% 
  mutate(comp.sp=if_else(rep(mixmdl$mu[2]>40,length(mixmdl$x)), # UMBRAL ARBITRARIO!!
                        comp.2+comp.3, # sero+ equals to the sum of comp 2+3
                        comp.3)) %>% # sero+ equals to the sum of comp 3
  mutate(comp.sn=if_else(rep(mixmdl$mu[2]>40,length(mixmdl$x)),
                        comp.1, # sero- equals to the sum of comp 1
                        comp.1+comp.2)) %>% # sero+ equals to the sum of comp 1+2
  mutate(label = if_else(comp.sn > u, "s-", 
                        ifelse(comp.sp > u, "s+", "s0"
                        #ifelse(comp.2 > u, "s+", #"s0"
                               #ifelse(comp.1 > u,"s++","s0")
                               ))) %>% 
  mutate(label=forcats::fct_relevel(label,"s-","s0","s+"#,"s++"
                                    )) 

s <- post.df %>% 
  ggplot(aes(x = factor(label))) +
  geom_bar() +
  xlab("Component") +
  ylab("Number of Data Points") +
  labs(title="Classification")

###
t <- post.df %>% 
  ggplot() +
  #geom_line(aes(x,comp.1), colour="green", lwd = 1.5) +
  #geom_line(aes(x,comp.2), colour="blue", lwd = 1.5) +
  geom_line(aes(x,comp.12), colour="blue", lwd = 1.5) +
  geom_line(aes(x,comp.3), colour="red", lwd = 1.5) +
  geom_hline(yintercept = u, col = "black") +
  #geom_vline(xintercept = cutoffs[2], col = "black", lty=3) +
  #geom_vline(xintercept = cutoffs[1], col = "black", lty=3) +
  xlab("Ab.units") +
  ylab("classification probability") +
  labs(title="Cutoff")

#Rmisc::multiplot(r,t,s,cols = 3)
  
#}

#sum(mco$Ab.units_log == mixmdl$x)
#length(mixmdl$x)
#sum(!post.df$x==mco$Ab.units_log)

msr <- inner_join(mco %>% rownames_to_column(),
           post.df %>%
             #dplyr::rename(Ab.units_log=x) %>% 
             dplyr::select(#Ab.units_log,
                           label) %>% 
             rownames_to_column(),
           by="rowname") #%>% 
  #mutate(test= Ab.units_log.x==Ab.units_log.y) %>% dplyr::count(test)

msr <- msr[FALSE,] #%>% glimpse()
```

### two-component

- higher s0 (indetermined) for all antigens

```{r}
msr <- msr[FALSE,] #%>% glimpse()
```

```{r,fig.height=3,fig.width=12}


###
set.seed(1)

for (i in 1:length(levels(f))) {#i=2 # SOLO FALSTATIN
#i <- 2
  
wait <- mco %>% filter(anti==levels(f)[i]) %>% 
  .$Ab.units #%>% log10()
mixmdl <- normalmixEM(wait, k = 2)
###
r <- data.frame(x = mixmdl$x) %>%
  ggplot() +
  geom_histogram(aes(x, ..density..), 
                 #binwidth = 1, 
                 #colour = "black", 
                 #fill = "gray",
                 alpha=.5,position = "identity"
                 ) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[1], 
                            mixmdl$sigma[1], 
                            lam = mixmdl$lambda[1]),
                colour = "red", lwd = 1.5) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[2], 
                            mixmdl$sigma[2], 
                            lam = mixmdl$lambda[2]),
                colour = "blue", lwd = 1.5) +
  #stat_function(geom = "line", 
  #              fun = plot_mix_comps,
  #              args = list(mixmdl$mu[3], 
  #                          mixmdl$sigma[3], 
  #                          lam = mixmdl$lambda[3]),
  #              colour = "green", lwd = 1.5) +
  ylab("Density") +
  xlab("Ab.units") +
  labs(title= paste0(ifelse(levels(f)[i]=="gest","GEST: ",
                            ifelse(levels(f)[i]=="falstatin","Falstatin: ",
                                   "MSP1-Pv200: ")),
                     "3-component distribution"
                     #,": LogLik=",
                     #mixmdl$loglik %>% format(digits=3)
                     )) 
  #+ scale_x_log10()

####
u <- 0.90 # 90% classification probability

post.df <- as.data.frame(cbind(x = mixmdl$x, mixmdl$posterior)) %>% 
  #mutate(comp.12=comp.1+comp.2,
  #       comp.23=comp.2+comp.3) %>% 
  mutate(comp.sp=comp.2) %>% # sero+ equals to the sum of comp 3
  mutate(comp.sn=comp.1) %>% # sero+ equals to the sum of comp 1+2
  mutate(label = if_else(comp.sn > u, "s-", 
                        ifelse(comp.sp > u, "s+", "s0"
                        #ifelse(comp.2 > u, "s+", #"s0"
                               #ifelse(comp.1 > u,"s++","s0")
                               ))) %>% 
  mutate(label=forcats::fct_relevel(label,"s-","s0","s+"#,"s++"
                                    )) 

s <- post.df %>% 
  ggplot(aes(x = factor(label))) +
  geom_bar() +
  xlab("Component") +
  ylab("Number of Data Points") +
  labs(title="Classification")

###
t <- post.df %>% 
  ggplot() +
  #geom_line(aes(x,comp.1), colour="green", lwd = 1.5) +
  #geom_line(aes(x,comp.2), colour="blue", lwd = 1.5) +
  #geom_point(aes(x,comp.sp), colour="blue", lwd = 1.5) +
  geom_line(aes(x,comp.sp), colour="blue", lwd = 1.5) +
  #geom_point(aes(x,comp.sn), colour="red", lwd = 1.5) +
  geom_line(aes(x,comp.sn), colour="red", lwd = 1.5) +
  geom_hline(yintercept = u, col = "black") +
  #geom_vline(xintercept = 63.6, col = "black", lty=3) +
  #geom_vline(xintercept = 69.7, col = "black", lty=3) +
  xlab("Ab.units") +
  ylab("classification probability") +
  labs(title="Cutoff")



###
msr_p <- inner_join(mco %>%
                    filter(anti==levels(f)[i]) %>% 
                    rownames_to_column(),
           post.df %>%
             #dplyr::rename(Ab.units_log=x) %>% 
             dplyr::select(#Ab.units_log,
                           label) %>% 
             rownames_to_column(),
           by="rowname") #%>% 
  #mutate(test= Ab.units_log.x==Ab.units_log.y) %>% dplyr::count(test)


msr <- dplyr::union(msr, msr_p)


Rmisc::multiplot(r,t,s,cols = 3)
  
}

msr_two <- msr
#msr_two %>% dplyr::count(anti)
msr_two %>% dplyr::count(anti,label) %>% group_by(anti) %>% mutate(prop=100*n/sum(n))
```

### three-component distribution: s-=1 s+=2+3

```{r}
msr <- msr[FALSE,] #%>% glimpse()
```

```{r,fig.height=3,fig.width=12}
set.seed(1)
#
#levels(f) <- levels(f)[c(1,3,NA)]
#
for (i in 1:length(levels(f))) {#i=3 # SOLO GEST + PV200
  
wait <- mco %>% filter(anti==levels(f)[i]) %>% 
  .$Ab.units #%>% log10()
mixmdl <- normalmixEM(wait, k = 3)
###
r <- data.frame(x = mixmdl$x) %>%
  ggplot() +
  geom_histogram(aes(x, ..density..), 
                 #binwidth = 1, 
                 #colour = "black", 
                 #fill = "gray",
                 alpha=.5,position = "identity"
                 ) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[1], 
                            mixmdl$sigma[1], 
                            lam = mixmdl$lambda[1]),
                colour = "red", lwd = 1.5) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[2], 
                            mixmdl$sigma[2], 
                            lam = mixmdl$lambda[2]),
                colour = "blue", lwd = 1.5) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[3], 
                            mixmdl$sigma[3], 
                            lam = mixmdl$lambda[3]),
                colour = "green", lwd = 1.5) +
  ylab("Density") +
  xlab("Ab.units") +
  labs(title= paste0(ifelse(levels(f)[i]=="gest","GEST: ",
                            ifelse(levels(f)[i]=="falstatin","Falstatin: ",
                                   "MSP1-Pv200: ")),
                     "3-component distribution"
                     #,": LogLik=",
                     #mixmdl$loglik %>% format(digits=3)
                     )) 
  #+ scale_x_log10()

####
u <- 0.90 # 90% classification probability

post.df <- as.data.frame(cbind(x = mixmdl$x, mixmdl$posterior)) %>% 
  #mutate(comp.12=comp.1+comp.2,
  #       comp.23=comp.2+comp.3) %>% 
  mutate(comp.sp=#if_else(rep(mixmdl$mu[2]>600,length(mixmdl$x)), # UMBRAL ARBITRARIO!!
                        comp.2+comp.3 # sero+ equals to the sum of comp 2+3
                  #      ,comp.3)
         ) %>% # sero+ equals to the sum of comp 3
  mutate(comp.sn=#if_else(rep(mixmdl$mu[2]>600,length(mixmdl$x)),
                        comp.1 # sero- equals to the sum of comp 1
                  #      ,comp.1+comp.2)
         ) %>% # sero+ equals to the sum of comp 1+2
  mutate(label = if_else(comp.sn > u, "s-", 
                        ifelse(comp.sp > u, "s+", "s0"
                        #ifelse(comp.2 > u, "s+", #"s0"
                               #ifelse(comp.1 > u,"s++","s0")
                               ))) %>% 
  mutate(label=forcats::fct_relevel(label,"s-","s0","s+"#,"s++"
                                    )) 

s <- post.df %>% 
  ggplot(aes(x = factor(label))) +
  geom_bar() +
  xlab("Component") +
  ylab("Number of Data Points") +
  labs(title="Classification")

###
t <- post.df %>% 
  ggplot() +
  #geom_line(aes(x,comp.1), colour="green", lwd = 1.5) +
  #geom_line(aes(x,comp.2), colour="blue", lwd = 1.5) +
  #geom_point(aes(x,comp.sp), colour="blue", lwd = 1.5) +
  geom_line(aes(x,comp.sp), colour="blue", lwd = 1.5) +
  #geom_point(aes(x,comp.sn), colour="red", lwd = 1.5) +
  geom_line(aes(x,comp.sn), colour="red", lwd = 1.5) +
  geom_hline(yintercept = u, col = "black") +
  #geom_vline(xintercept = 63.6, col = "black", lty=3) +
  #geom_vline(xintercept = 69.7, col = "black", lty=3) +
  xlab("Ab.units") +
  ylab("classification probability") +
  labs(title="Cutoff")


###
msr_p <- inner_join(mco %>%
                    filter(anti==levels(f)[i]) %>% 
                    rownames_to_column(),
           post.df %>%
             #dplyr::rename(Ab.units_log=x) %>% 
             dplyr::select(#Ab.units_log,
                           label) %>% 
             rownames_to_column(),
           by="rowname") #%>% 
  #mutate(test= Ab.units_log.x==Ab.units_log.y) %>% dplyr::count(test)


msr <- dplyr::union(msr, msr_p)


Rmisc::multiplot(r,t,s,cols = 3)
  
}

msr_three_a <- msr
#msr_three %>% dplyr::count(anti)
msr_three_a %>% dplyr::count(anti,label) %>% group_by(anti) %>% mutate(prop=100*n/sum(n))
```

### three-component distribution: s-=1+2 s+=3

```{r}
msr <- msr[FALSE,] #%>% glimpse()
```

```{r,fig.height=3,fig.width=12}
set.seed(1)
#
#levels(f) <- levels(f)[c(1,3,NA)]
#
for (i in 1:length(levels(f))) {#i=3 # SOLO GEST + PV200
  
wait <- mco %>% filter(anti==levels(f)[i]) %>% 
  .$Ab.units #%>% log10()
mixmdl <- normalmixEM(wait, k = 3)
###
r <- data.frame(x = mixmdl$x) %>%
  ggplot() +
  geom_histogram(aes(x, ..density..), 
                 #binwidth = 1, 
                 #colour = "black", 
                 #fill = "gray",
                 alpha=.5,position = "identity"
                 ) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[1], 
                            mixmdl$sigma[1], 
                            lam = mixmdl$lambda[1]),
                colour = "red", lwd = 1.5) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[2], 
                            mixmdl$sigma[2], 
                            lam = mixmdl$lambda[2]),
                colour = "blue", lwd = 1.5) +
  stat_function(geom = "line", 
                fun = plot_mix_comps,
                args = list(mixmdl$mu[3], 
                            mixmdl$sigma[3], 
                            lam = mixmdl$lambda[3]),
                colour = "green", lwd = 1.5) +
  ylab("Density") +
  xlab("Ab.units") +
  labs(title= paste0(ifelse(levels(f)[i]=="gest","GEST: ",
                            ifelse(levels(f)[i]=="falstatin","Falstatin: ",
                                   "MSP1-Pv200: ")),
                     "3-component distribution"
                     #,": LogLik=",
                     #mixmdl$loglik %>% format(digits=3)
                     )) 
  #+ scale_x_log10()

####
u <- 0.90 # 90% classification probability

post.df <- as.data.frame(cbind(x = mixmdl$x, mixmdl$posterior)) %>% 
  #mutate(comp.12=comp.1+comp.2,
  #       comp.23=comp.2+comp.3) %>% 
  mutate(comp.sp=#if_else(rep(mixmdl$mu[2]>600,length(mixmdl$x)), # UMBRAL ARBITRARIO!!
                  #      comp.2+comp.3, # sero+ equals to the sum of comp 2+3
                        comp.3#)
         ) %>% # sero+ equals to the sum of comp 3
  mutate(comp.sn=#if_else(rep(mixmdl$mu[2]>600,length(mixmdl$x)),
                  #      comp.1, # sero- equals to the sum of comp 1
                        comp.1+comp.2#)
         ) %>% # sero+ equals to the sum of comp 1+2
  mutate(label = if_else(comp.sn > u, "s-", 
                        ifelse(comp.sp > u, "s+", "s0"
                        #ifelse(comp.2 > u, "s+", #"s0"
                               #ifelse(comp.1 > u,"s++","s0")
                               ))) %>% 
  mutate(label=forcats::fct_relevel(label,"s-","s0","s+"#,"s++"
                                    )) 

s <- post.df %>% 
  ggplot(aes(x = factor(label))) +
  geom_bar() +
  xlab("Component") +
  ylab("Number of Data Points") +
  labs(title="Classification")

###
t <- post.df %>% 
  ggplot() +
  #geom_line(aes(x,comp.1), colour="green", lwd = 1.5) +
  #geom_line(aes(x,comp.2), colour="blue", lwd = 1.5) +
  #geom_point(aes(x,comp.sp), colour="blue", lwd = 1.5) +
  geom_line(aes(x,comp.sp), colour="blue", lwd = 1.5) +
  #geom_point(aes(x,comp.sn), colour="red", lwd = 1.5) +
  geom_line(aes(x,comp.sn), colour="red", lwd = 1.5) +
  geom_hline(yintercept = u, col = "black") +
  #geom_vline(xintercept = 63.6, col = "black", lty=3) +
  #geom_vline(xintercept = 69.7, col = "black", lty=3) +
  xlab("Ab.units") +
  ylab("classification probability") +
  labs(title="Cutoff")


###
msr_p <- inner_join(mco %>%
                    filter(anti==levels(f)[i]) %>% 
                    rownames_to_column(),
           post.df %>%
             #dplyr::rename(Ab.units_log=x) %>% 
             dplyr::select(#Ab.units_log,
                           label) %>% 
             rownames_to_column(),
           by="rowname") #%>% 
  #mutate(test= Ab.units_log.x==Ab.units_log.y) %>% dplyr::count(test)


msr <- dplyr::union(msr, msr_p)


Rmisc::multiplot(r,t,s,cols = 3)
  
}

msr_three_b <- msr
#msr_three %>% dplyr::count(anti)
msr_three_b %>% dplyr::count(anti,label) %>% group_by(anti) %>% mutate(prop=100*n/sum(n))
```

```{r}
msr <- #union(
  msr_three_b
  #,msr_two)
```

-->
